"use strict";
(self.webpackJsonp__wix_thunderbolt_app = self.webpackJsonp__wix_thunderbolt_app || []).push([
    [6121], {
        28123: function(e, i, t) {
            t.r(i), t.d(i, {
                AUTH_RESULT_REASON: function() {
                    return P.$9
                },
                BIEvents: function() {
                    return _
                },
                INTERACTIONS: function() {
                    return P.SE
                },
                PrivacyStatus: function() {
                    return ce.iY
                },
                PrivacyStatusStatus: function() {
                    return f
                },
                Role: function() {
                    return O
                },
                SiteMembersApiSymbol: function() {
                    return w.n9
                },
                Status: function() {
                    return I
                },
                isLoginAcceptableError: function() {
                    return N.Y2
                },
                isSignupAcceptableError: function() {
                    return N.fJ
                },
                memberDetailsFromDTO: function() {
                    return N.Ky
                },
                page: function() {
                    return Ee
                },
                site: function() {
                    return be
                }
            });
            var o = t(43757),
                a = t(61049),
                n = t(49574),
                s = t(5096),
                r = t(55048),
                l = t(10666),
                c = t(58629),
                d = t(26513),
                u = t(82627),
                g = t(94315),
                m = t(25954),
                p = t(8562),
                h = t(21511),
                v = t(56405),
                S = t(19238),
                b = t(87821),
                E = t(86305),
                C = t(99552),
                y = t(16684),
                P = t(95848),
                w = t(2811);
            class D {
                constructor(e, i, t, o, a) {
                    this.propsStore = e, this.structureApi = i, this.siteScrollBlocker = t, this.browserWindow = o, this.cyclicTabbing = a
                }
                async displayDialog(e, i, t, o = {}) {
                    const a = async () => {
                            (0, p.yF)(this.browserWindow) || (this.activeElementBeforeShowDialog = this.browserWindow.document.activeElement);
                            const o = (0, y.uniqueId)(w.rj);
                            this.propsStore.update({
                                [o]: Object.assign(Object.assign({}, i), t)
                            }), this.currentCompId && this.cyclicTabbing.disableCyclicTabbing(this.currentCompId), this.cyclicTabbing.enableCyclicTabbing(o), await this.structureApi.addComponentToDynamicStructure(o, {
                                componentType: e,
                                components: []
                            }), this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId)), this.siteScrollBlocker.setSiteScrollingBlocked(!0, o), this.currentCompId = o
                        },
                        {
                            shouldWaitForAppDidMount: n,
                            registerToAppDidMount: s
                        } = o;
                    n && s ? s(a) : await a()
                }
                hideDialog() {
                    var e;
                    this.currentCompId && (this.structureApi.removeComponentFromDynamicStructure(this.currentCompId), this.siteScrollBlocker.setSiteScrollingBlocked(!1, this.currentCompId), this.cyclicTabbing.disableCyclicTabbing(this.currentCompId)), this.currentCompId = void 0, (0, p.yF)(this.browserWindow) || (null === (e = this.activeElementBeforeShowDialog) || void 0 === e || e.focus(), this.activeElementBeforeShowDialog = null)
                }
            }
            var f, I, O;
            ! function(e) {
                e.UNKNOWN = "UNKNOWN", e.PRIVATE = "PRIVATE", e.PUBLIC = "PUBLIC"
            }(f || (f = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.PENDING = "PENDING", e.APPROVED = "APPROVED", e.BLOCKED = "BLOCKED", e.OFFLINE = "OFFLINE"
            }(I || (I = {})),
            function(e) {
                e.UNDEFINED_ROLE = "UNDEFINED_ROLE", e.MEMBER = "MEMBER", e.OWNER = "OWNER", e.CONTRIBUTOR = "CONTRIBUTOR"
            }(O || (O = {}));
            var N = t(43096),
                A = t(42473),
                T = t(86681);
            const _ = ({
                    sessionManager: e,
                    businessLogger: i,
                    wixBiSession: t,
                    viewMode: o,
                    language: a
                }) => {
                    const n = (i, n) => ({
                        biToken: t.msId,
                        context: i,
                        ts: R(t),
                        viewmode: o,
                        visitor_id: e.getVisitorId(),
                        site_member_id: e.getSiteMemberId(),
                        vsi: t.viewerSessionId,
                        site_settings_lng: a.siteLanguage,
                        browser_lng: a.userLanguage,
                        lng_mismatch: a.siteLanguage !== a.userLanguage,
                        layout: n
                    });
                    return {
                        loginOrSignUpDialogLoaded: (e, t = "fullscreen") => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 658
                            }, n(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        closingDialog: (e, t = "fullscreen") => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 602,
                                form_type: "default"
                            }, n(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        emailAuthSubmitClicked: (e, t) => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 603,
                                form_type: "default"
                            }, n(e, t)), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersFeatureLoaded: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 698
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersSdkFeatureLoaded: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 699
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationNewMembersModalLoad: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1809
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationSendCodeClick: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1810
                            }, n()), {
                                endpoint: "site-members"
                            })
                        },
                        siteMembersEmailConfirmationOnResendCodeClick: () => {
                            i.logger.log(Object.assign({
                                src: 5,
                                evid: 1811
                            }, n()), {
                                endpoint: "site-members"
                            })
                        }
                    }
                },
                R = e => {
                    const i = e.initialTimestamp || 0;
                    return Date.now() - i
                },
                L = {
                    isCloseable: !0,
                    returnPages: !1
                };
            class k {
                constructor(e, i) {
                    this.shouldRunCustomPopupCloseCallback = !0, this.popups = e, this.onReset = i, this.config = L
                }
                async openPopupPage(e, i) {
                    var t;
                    const o = this.shouldRunCustomPopupCloseCallback;
                    this.preventCustomPopupCloseCallback(), await (null === (t = this.popups) || void 0 === t ? void 0 : t.open(e, (() => {
                        this.shouldRunCustomPopupCloseCallback && (this.rejectAuthenticationRequest(), i && i())
                    }))), this.shouldRunCustomPopupCloseCallback = o
                }
                preventCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !1
                }
                allowCustomPopupCloseCallback() {
                    this.shouldRunCustomPopupCloseCallback = !0
                }
                assignRequestAuthenticationRejection(e) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || e
                }
                assignRequestAuthenticationResolveInstance(e) {
                    this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                assignRequestAuthenticationPromise(e, i) {
                    this.requestAuthenticationRejectInstance = this.requestAuthenticationRejectInstance || i, this.requestAuthenticationResolveInstance = this.requestAuthenticationResolveInstance || e
                }
                rejectAuthenticationRequest() {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationRejectInstance(P.$9.CANCELED), this.reset())
                }
                resolveAuthenticationRequest(e) {
                    this.requestAuthenticationRejectInstance && (this.requestAuthenticationResolveInstance(e), this.reset())
                }
                setConfig({
                    isCloseable: e = !0,
                    returnPages: i = !1
                }) {
                    this.config = {
                        isCloseable: e,
                        returnPages: i
                    }
                }
                reset() {
                    var e;
                    null === (e = this.onReset) || void 0 === e || e.call(this), this.requestAuthenticationRejectInstance = void 0, this.requestAuthenticationResolveInstance = void 0, this.config = L
                }
            }
            var U, M, B, F, V, j, $ = t(48511),
                W = t(26034),
                x = {},
                G = {
                    memberPrivacySettings: "_memberPrivacySettings"
                },
                q = {
                    updatedDate: "google.protobuf.Timestamp"
                };

            function H(e) {
                return (0, $.Kk)(Object.assign(e, {
                    domainToMappings: {
                        "editor.wixapps.net": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "api._api_base_domain_": [{
                            srcPath: "/members/v1/privacy-settings",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "editor._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "blocks._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "create.editorx": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        _: [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }],
                        "*.dev.wix-code.com": [{
                            srcPath: "/_api/members/v1/privacy-settings",
                            destPath: "/v1/privacy-settings"
                        }]
                    }
                }))
            }! function(e) {
                e.UNKNOWN = "UNKNOWN", e.VISIBLE_TO_MEMBERS_ONLY = "VISIBLE_TO_MEMBERS_ONLY", e.VISIBLE_TO_ALL = "VISIBLE_TO_ALL"
            }(U || (U = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.NO_ONE = "NO_ONE", e.ANYONE = "ANYONE"
            }(M || (M = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.ENABLED = "ENABLED", e.DISABLED = "DISABLED", e.PENDING = "PENDING", e.DEMO = "DEMO"
            }(B || (B = {})),
            function(e) {
                e.OTHER = "OTHER", e.FROM_TEMPLATE = "FROM_TEMPLATE", e.DUPLICATE_BY_SITE_TRANSFER = "DUPLICATE_BY_SITE_TRANSFER", e.DUPLICATE = "DUPLICATE", e.OLD_SITE_TRANSFER = "OLD_SITE_TRANSFER", e.FLASH = "FLASH"
            }(F || (F = {})),
            function(e) {
                e.UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE", e.WIX = "WIX", e.SHOUT_OUT = "SHOUT_OUT", e.ALBUMS = "ALBUMS", e.WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE", e.HOTELS = "HOTELS", e.CLUBS = "CLUBS", e.ONBOARDING_DRAFT = "ONBOARDING_DRAFT", e.DEV_SITE = "DEV_SITE", e.LOGOS = "LOGOS", e.VIDEO_MAKER = "VIDEO_MAKER", e.PARTNER_DASHBOARD = "PARTNER_DASHBOARD", e.DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY", e.HTML_DRAFT = "HTML_DRAFT", e.SITELESS_BUSINESS = "SITELESS_BUSINESS", e.CREATOR_ECONOMY = "CREATOR_ECONOMY", e.DASHBOARD_FIRST = "DASHBOARD_FIRST", e.ANYWHERE = "ANYWHERE", e.HEADLESS = "HEADLESS", e.ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS"
            }(V || (V = {})),
            function(e) {
                e.UNKNOWN = "UNKNOWN", e.TRASH = "TRASH", e.DELETED = "DELETED", e.PENDING_PURGE = "PENDING_PURGE"
            }(j || (j = {}));
            const K = e => {
                    var i, t;
                    const o = null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i,
                        a = null !== (t = e.privacyNoteType) && void 0 !== t ? t : "CHECKBOX";
                    return o ? a : "CHECKBOX"
                },
                Y = e => {
                    var i;
                    return "NOTE" === K(e) || (null === (i = e.joinCommunityCheckedByDefault) || void 0 === i || i)
                },
                z = async (e, i) => {
                    const {
                        data: t
                    } = await e.request(function(e) {
                        var i = (0, W.G)(x, {}),
                            t = i.toJSON,
                            o = i.fromJSON,
                            a = (0, W.G)(G, {
                                _memberPrivacySettings: q
                            }).fromJSON;

                        function n(i) {
                            var o = i.host,
                                n = t(e);
                            return {
                                entityFqdn: "wix.members.v1.member_privacy_settings",
                                method: "GET",
                                methodFqn: "com.wixpress.members.memberprivacysettings.MemberPrivacySettingsService.GetMemberPrivacySettings",
                                url: H({
                                    protoPath: "/v1/privacy-settings",
                                    data: n,
                                    host: o
                                }),
                                params: (0, $.kI)(n),
                                transformResponse: a
                            }
                        }
                        return n.fromReq = o, n
                    }({}), {
                        signedInstance: i
                    });
                    return t.memberPrivacySettings
                },
                J = {
                    [I.APPROVED]: "ACTIVE",
                    [I.PENDING]: "PENDING"
                },
                X = e => {
                    var i;
                    return e && null !== (i = J[e]) && void 0 !== i ? i : "APPLICANT"
                };
            var Q = t(34584),
                Z = {
                    value: "_customValue"
                },
                ee = {
                    numValue: "DOUBLE",
                    dateValue: "google.protobuf.Timestamp",
                    listValue: "_listValue",
                    mapValue: "_mapValue"
                },
                ie = {
                    createdDate: "google.protobuf.Timestamp",
                    updatedDate: "google.protobuf.Timestamp",
                    identityProfile: "_identityProfile"
                },
                te = {
                    customFields: "_customField"
                },
                oe = {
                    value: "_customValue"
                },
                ae = {},
                ne = {
                    identity: "_identity",
                    additionalData: "Map#_customValue"
                },
                se = {
                    value: "Map#_customValue"
                },
                re = {
                    identity: "_identity"
                };

            function le(e) {
                return (0, $.Kk)(Object.assign(e, {
                    domainToMappings: {
                        _: [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "manage._base_domain_": [{
                            srcPath: "/_api/authentication",
                            destPath: ""
                        }],
                        "users._base_domain_": [{
                            srcPath: "/authentication",
                            destPath: ""
                        }, {
                            srcPath: "/iam/wix/google",
                            destPath: "/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69"
                        }],
                        "dev._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "bo._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "www.wixapis.com": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        _base_domain_: [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }],
                        "www._base_domain_": [{
                            srcPath: "/_api/iam/authentication",
                            destPath: ""
                        }]
                    }
                }))
            }
            var ce = t(74880);
            const de = (e, i, t) => {
                    document.cookie = `${e}=;max-age=0`, document.cookie = `${e}=;max-age=0;path=${i}`, document.cookie = `${e}=;domain=${t};max-age=0`, document.cookie = `${e}=;domain=${t};max-age=0;path=${i}`
                },
                ue = (0, o.ff)([(0, o.t6)(a.R9, w.u2), (0, o.t6)(a.jC, w.u2), (0, o.t6)(a.Wf, w.u2), (0, o.t6)(a.z8, w.u2), n.U, s.EE, s.Zr, v.Xb, r.xP, r.QZ, s.bk, s.ZQ, S.F0, (0, o.jt)(b.x), S.Iz, l.$, c.sK, (0, o.jt)(E.cC), (0, o.jt)(C.I), d.jj, u.O, (0, o.jt)(g.C), (0, o.jt)(T.a), (0, o.jt)(A.I)], ((e, i, t, o, a, n, s, r, l, c, d, u, g, v, S, b, E, C, w = {
                    trackEvent: () => 0
                }, f, I, A, T, R) => {
                    var L, U, B, F;
                    const V = (0, m.O)(),
                        {
                            loginSocialBarOnSite: j,
                            collectionExposure: $,
                            protectedHomepage: x,
                            smSessionCookie: G,
                            memberInfoAppId: q,
                            smcollectionId: H,
                            isTemplate: J
                        } = e;
                    let {
                        sm_efCookie: ue
                    } = e;
                    const ge = "WixInternal" === $,
                        me = "22bef345-3c5b-4c18-b782-74d4085112ff",
                        pe = r.getUserSession();
                    let he = r.getAppInstanceByAppDefId(me);
                    const ve = () => (0, N.OP)(r),
                        {
                            smSettings: Se,
                            tpaApplicationIds: be,
                            policyLinks: Ee,
                            translations: Ce
                        } = i,
                        ye = q && be[q],
                        {
                            metaSiteId: Pe,
                            externalBaseUrl: we,
                            siteId: De,
                            siteRevision: fe
                        } = s.site,
                        Ie = s.requestUrl,
                        Oe = s.viewMode,
                        Ne = null !== (U = null === (L = s.anywhereConfig) || void 0 === L ? void 0 : L.siteId) && void 0 !== U ? U : De,
                        Ae = null !== (F = null === (B = s.anywhereConfig) || void 0 === B ? void 0 : B.revision) && void 0 !== F ? F : fe,
                        Te = -1 !== P.F0.findIndex((e => {
                            var i, t;
                            return null === (t = null === (i = null == u ? void 0 : u.navigator) || void 0 === i ? void 0 : i.userAgent) || void 0 === t ? void 0 : t.includes(e)
                        })),
                        _e = !Te,
                        Re = !Te,
                        Le = `/_api/wix-sm-webapp/tokens/verify/${Pe}/${Ne}`,
                        ke = `${we.replace(/\/$/,"")}/api/wix-sm/v1/authorize/${Ne}/pages`,
                        Ue = `/_api/wix-sm-webapp/tokens/logout/${Pe}`,
                        Me = `/_api/wix-sm-webapp/member/changePasswordWithMailToken?metaSiteId=${Pe}&collectionId=${H}`,
                        Be = `/_api/wix-sm-webapp/social/token/handle?metaSiteId=${Pe}&collectionId=${H}`,
                        Fe = Se.smFirstDialogLogin ? "login" : "signup",
                        {
                            socialLoginFacebookEnabled: Ve,
                            socialLoginGoogleEnabled: je,
                            termsOfUse: $e,
                            privacyPolicy: We,
                            codeOfConduct: xe,
                            customSignUpPageId: Ge,
                            customSignInPageId: qe
                        } = Se,
                        {
                            privacyNoteType: He,
                            joinCommunityCheckedByDefault: Ke
                        } = ((e, i) => {
                            var t;
                            return i["specs.thunderbolt.enableSignUpPrivacyNoteType"] ? {
                                privacyNoteType: K(e),
                                joinCommunityCheckedByDefault: Y(e)
                            } : {
                                privacyNoteType: "CHECKBOX",
                                joinCommunityCheckedByDefault: null === (t = e.joinCommunityCheckedByDefault) || void 0 === t || t
                            }
                        })(Se, I);
                    let {
                        smToken: Ye
                    } = e, ze = {}, Je = G, Xe = null, Qe = !1;
                    const Ze = e => {
                            Xe = e
                        },
                        ei = () => ({
                            registerToAppDidMount: Ze,
                            shouldWaitForAppDidMount: !Qe
                        }),
                        ii = async () => {
                            var e;
                            if (I["specs.thunderbolt.getMemberDetailsFromMembersNg"]) {
                                const {
                                    member: i
                                } = await si("/_api/members/v1/members/my?fieldsets=FULL", {
                                    headers: {
                                        authorization: null !== (e = r.getAppInstanceByAppDefId(me)) && void 0 !== e ? e : ""
                                    }
                                }), {
                                    role: t
                                } = await (0, N.Xh)((() => {
                                    var e;
                                    return si(`/api/wix-sm/v1/members/${null==i?void 0:i.id}/role`, {
                                        headers: {
                                            authorization: null !== (e = r.getAppInstanceByAppDefId(me)) && void 0 !== e ? e : ""
                                        }
                                    })
                                }), (() => ({
                                    role: O.MEMBER
                                })));
                                return (({
                                    member: e,
                                    role: i
                                }) => {
                                    var t, o, a, n, s, r, l, c, d, u, g, m, p, h, v, S, b, E, C, y, P;
                                    return {
                                        id: null !== (t = null == e ? void 0 : e.id) && void 0 !== t ? t : "",
                                        contactId: null !== (o = null == e ? void 0 : e.contactId) && void 0 !== o ? o : "",
                                        loginEmail: null !== (a = null == e ? void 0 : e.loginEmail) && void 0 !== a ? a : "",
                                        imageUrl: null !== (r = null === (s = null === (n = null == e ? void 0 : e.profile) || void 0 === n ? void 0 : n.photo) || void 0 === s ? void 0 : s.url) && void 0 !== r ? r : "",
                                        nickname: null !== (c = null === (l = null == e ? void 0 : e.profile) || void 0 === l ? void 0 : l.nickname) && void 0 !== c ? c : "",
                                        profilePrivacyStatus: null !== (d = null == e ? void 0 : e.privacyStatus) && void 0 !== d ? d : "",
                                        slug: null !== (g = null === (u = null == e ? void 0 : e.profile) || void 0 === u ? void 0 : u.slug) && void 0 !== g ? g : "",
                                        status: X(null == e ? void 0 : e.status),
                                        creationDate: null !== (m = null == e ? void 0 : e.createdDate) && void 0 !== m ? m : "",
                                        lastUpdateDate: null !== (p = null == e ? void 0 : e.updatedDate) && void 0 !== p ? p : "",
                                        lastLoginDate: null !== (h = null == e ? void 0 : e.lastLoginDate) && void 0 !== h ? h : "",
                                        emailVerified: null !== (v = null == e ? void 0 : e.loginEmailVerified) && void 0 !== v && v,
                                        role: null != i ? i : "MEMBER",
                                        owner: i === O.OWNER,
                                        firstName: null !== (b = null === (S = null == e ? void 0 : e.contact) || void 0 === S ? void 0 : S.firstName) && void 0 !== b ? b : "",
                                        lastName: null !== (C = null === (E = null == e ? void 0 : e.contact) || void 0 === E ? void 0 : E.lastName) && void 0 !== C ? C : "",
                                        memberName: `${null===(y=null==e?void 0:e.contact)||void 0===y?void 0:y.firstName} ${null===(P=null==e?void 0:e.contact)||void 0===P?void 0:P.lastName}`,
                                        groups: void 0,
                                        emails: void 0,
                                        phones: void 0,
                                        addresses: void 0,
                                        labels: void 0,
                                        customFields: void 0
                                    }
                                })({
                                    member: i,
                                    role: t
                                })
                            }
                            const i = `/_api/wix-sm-webapp/member/${Ye}?collectionId=${H}&metaSiteId=${Pe}`,
                                {
                                    payload: t
                                } = await si(i);
                            return (0, N.Ky)(t)
                        },
                        ti = {},
                        oi = {},
                        ai = _({
                            sessionManager: r,
                            businessLogger: b,
                            wixBiSession: E,
                            viewMode: null == Oe ? void 0 : Oe.toUpperCase(),
                            language: d
                        });
                    ai.siteMembersFeatureLoaded();
                    const ni = {},
                        si = (0, N.Qn)(a, {
                            credentials: "same-origin",
                            headers: {
                                accept: "application/json",
                                "x-wix-site-revision": `${Ae}`,
                                "x-wix-client-artifact-id": "thunderbolt"
                            }
                        }, Ie),
                        ri = (0, Q.d)({
                            isSSR: !1
                        }),
                        li = ((e, i) => {
                            let t;
                            return {
                                canHavePublicMembers: async () => t || (t = new Promise((async t => {
                                    const o = await z(e, i());
                                    t((null == o ? void 0 : o.publicMemberCandidates) === M.ANYONE)
                                })), t)
                            }
                        })(ri, (() => null != he ? he : "")),
                        ci = ((e, i, t) => {
                            const {
                                isCommunityInstalled: o
                            } = i;
                            return {
                                canHavePublicCommunity: async () => t["specs.thunderbolt.shouldUseMemberPrivacySettingsService"] ? e.canHavePublicMembers() : o
                            }
                        })(li, e, I),
                        di = ((e, i, t, o, a) => new D(e, i, t, o, a))(l, c, v, u, T),
                        ui = new URL(Ie).searchParams.get("clientId"),
                        gi = ((e, i, t, o, a, n) => {
                            let s, r;
                            const l = "/_serverless/collection-settings-facade/get-settings",
                                c = async () => r || e(n ? `${l}?clientId=${n}` : l, {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: a || ""
                                    }
                                }).then((e => (r = e, r))),
                                d = async () => o["specs.thunderbolt.useIAMEnabledConnections"] ? c().then((e => e.collectionSettings)) : s || e("/_api/wix-sm-webapp/v1/collection/settings", {
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: a || ""
                                    }
                                }).then((e => e.settings)).then((e => (s = e, e)));
                            return {
                                getSiteMembersSettings: d,
                                getCaptchaSettings: () => d().then(N.B_).catch((e => (i.captureError(e, {
                                    tags: {
                                        feature: "site-members"
                                    }
                                }), t.trackEvent((0, P.RN)(P.eE.ACTIONS.SETTINGS.FAIL)), {
                                    invisible: {
                                        login: !1,
                                        signup: !1
                                    },
                                    visible: {
                                        login: !1,
                                        signup: !0
                                    }
                                }))),
                                getEnabledConnections: () => c().then((e => {
                                    var i;
                                    return null !== (i = e.enabledConnections) && void 0 !== i ? i : []
                                })),
                                getLoginRedirectUrl: () => c().then((e => e.loginUrl))
                            }
                        })(si, n, w, I, he, ui || void 0),
                        mi = (0, N.eL)(u),
                        pi = (0, N.kY)(u, V),
                        hi = new k(C, (async () => {
                            const e = await gi.getCaptchaSettings();
                            (e.invisible.login || e.invisible.signup) && pi.hideCaptchaBadge()
                        })),
                        vi = null == R ? void 0 : R.getBsi(),
                        Si = vi ? vi.split("|")[0] : "00000000-0000-0000-0000-000000000000",
                        bi = e => {
                            n.interactionStarted(P.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(e))
                        },
                        Ei = {
                            appDidMount() {
                                Xe && Xe(), Qe = !0
                            },
                            async login(e, i, t, o = !1, a, n = !1, s) {
                                var r, l, c, d, u, g, m, p, h, v, S;
                                try {
                                    const s = await gi.getCaptchaSettings();
                                    if (s.visible.login && !(null == t ? void 0 : t.recaptchaToken) && !(null == a ? void 0 : a.otp) && !(null == a ? void 0 : a.verificationId)) throw P.Xu;
                                    w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT));
                                    const r = await Ei.performLogin(e, i, n, s, t, a),
                                        l = await Ei.handleLoginResponse(r, o);
                                    return w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUCCESS)), l
                                } catch (a) {
                                    if ((0, N.Y2)(a) || w.trackEvent({
                                            eventName: "CustomEvent",
                                            params: {
                                                eventCategory: "Site members",
                                                eventAction: "Log in Failure",
                                                eventLabel: "Wix"
                                            }
                                        }), (null === (l = null === (r = null == a ? void 0 : a.details) || void 0 === r ? void 0 : r.applicationError) || void 0 === l ? void 0 : l.code) === P.O1.WAITING_APPROVAL && Ei.showAdminApprovalDialog(e), (0, N.yQ)(a)) {
                                        const r = null === (u = null === (d = null === (c = null == a ? void 0 : a.details) || void 0 === c ? void 0 : c.applicationError) || void 0 === d ? void 0 : d.data) || void 0 === u ? void 0 : u.verificationId,
                                            l = null !== (h = null === (p = null === (m = null === (g = null == a ? void 0 : a.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === m ? void 0 : m.data) || void 0 === p ? void 0 : p.verificationFailureReason) && void 0 !== h ? h : null === (S = null === (v = null == a ? void 0 : a.details) || void 0 === v ? void 0 : v.applicationError) || void 0 === S ? void 0 : S.code,
                                            b = {
                                                email: e,
                                                verificationId: r,
                                                error: l
                                            };
                                        return Ei.showVerificationCodeDialog(b).then((a => {
                                            const r = {
                                                verificationId: null == b ? void 0 : b.verificationId,
                                                otp: a
                                            };
                                            return Ei.login(e, i, t, o, r, n, s).catch((e => {
                                                throw n && Ei.showLoginDialog(s, e), e
                                            }))
                                        })).then((e => (di.hideDialog(), e)))
                                    }
                                    throw a
                                }
                            },
                            async performLogin(e, i, t, o, a, n) {
                                var s;
                                const r = null == C ? void 0 : C.getCurrentLightboxId(),
                                    l = null === (s = f.getCurrentRouteInfo()) || void 0 === s ? void 0 : s.pageId,
                                    c = t || qe && r && qe === r || qe && l && qe === l,
                                    d = o.invisible.login && c ? await mi(P.Ly.LOGIN) : void 0;
                                return (0, N.gb)(!!I["specs.thunderbolt.useIAMPlatform"], (async () => {
                                    var t, o;
                                    const n = [];
                                    (null == a ? void 0 : a.recaptchaToken) && n.push({
                                        Recaptcha: null == a ? void 0 : a.recaptchaToken
                                    }), d && n.push({
                                        InvisibleRecaptcha: d
                                    });
                                    const s = {
                                            identifier: {
                                                email: e
                                            },
                                            inputs: {
                                                password: i
                                            },
                                            captcha_tokens: n
                                        },
                                        r = I["specs.thunderbolt.iamOverAmbassador"] ? await ri.request(function(e) {
                                            var i = (0, W.G)(ae, {}),
                                                t = i.toJSON,
                                                o = i.fromJSON,
                                                a = (0, W.G)(ne, {
                                                    _customField: Z,
                                                    _customValue: ee,
                                                    _identity: ie,
                                                    _identityProfile: te,
                                                    _listValue: oe,
                                                    _mapValue: se
                                                }).fromJSON;

                                            function n(i) {
                                                var o = i.host,
                                                    n = t(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.Login",
                                                    url: le({
                                                        protoPath: "/v1/login",
                                                        data: n,
                                                        host: o
                                                    }),
                                                    data: n,
                                                    transformResponse: a
                                                }
                                            }
                                            return n.fromReq = o, n
                                        }(s), {
                                            signedInstance: he || ""
                                        }).then((e => e.data)) : await si("/_api/iam/authentication/v1/login", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: he || ""
                                            },
                                            body: JSON.stringify(s)
                                        });
                                    return {
                                        member: (0, N.T2)(r),
                                        token: r.sessionToken,
                                        pages: (0, N.AC)(null === (t = r.additionalData) || void 0 === t ? void 0 : t.protectedPages),
                                        status: null === (o = null == r ? void 0 : r.state) || void 0 === o ? void 0 : o.status
                                    }
                                }), (async () => {
                                    var t;
                                    const o = await si("/_api/wix-sm-webapp/v1/auth/login", {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json",
                                            authorization: he || ""
                                        },
                                        body: JSON.stringify({
                                            email: e,
                                            password: i,
                                            recaptchaToken: null == a ? void 0 : a.recaptchaToken,
                                            invisibleRecaptchaToken: d,
                                            emailVerification: n
                                        })
                                    });
                                    return {
                                        member: o.member,
                                        token: null === (t = null == o ? void 0 : o.session) || void 0 === t ? void 0 : t.token
                                    }
                                }))
                            },
                            async handleOauthToken(e, i, t, o, a = !1) {
                                const s = r.getVisitorId();
                                n.interactionStarted(P.SE.SOCIAL_APP_LOGIN), w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT, i));
                                try {
                                    const {
                                        payload: r
                                    } = await si(Be, {
                                        method: "POST",
                                        headers: {
                                            "Content-Type": "application/json"
                                        },
                                        body: JSON.stringify({
                                            svSession: pe,
                                            visitorId: s,
                                            token: e,
                                            provider: i,
                                            mode: t,
                                            lang: d.userLanguage,
                                            privacyStatus: o
                                        })
                                    });
                                    let l, c;
                                    n.interactionEnded(P.SE.SOCIAL_APP_LOGIN), n.interactionEnded(P.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(i)), r.smSession && (c = r.smSession.siteMemberDto, l = r.smSession.sessionToken), c = r.siteMemberDto;
                                    const g = (0, N.Ky)(c);
                                    (0, N.kS)(u, Ie, {});
                                    const m = await Ei.handleLoginResponse({
                                        member: g,
                                        token: l
                                    }, a);
                                    return w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUCCESS, i)), m
                                } catch (e) {
                                    throw w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.FAIL, i)), e
                                }
                            },
                            async handleSocialLoginResponse(e, i, t = !1) {
                                var o;
                                const a = null !== (o = P.KG[i]) && void 0 !== o ? o : i;
                                n.interactionStarted(P.SE.SOCIAL_APP_LOGIN), n.interactionEnded(P.SE.SOCIAL_APP_LOGIN), n.interactionEnded(P.SE.SOCIAL_APP_LOGIN_WITH_VENDOR(a)), w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUBMIT, a));
                                const s = (0, N.yL)(e);
                                (0, N.kS)(u, Ie, {});
                                const r = await Ei.handleLoginResponse(s, t);
                                return w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGIN.SUCCESS, a)), r
                            },
                            async handleLoginResponse({
                                token: e,
                                member: i,
                                pages: t,
                                status: o
                            }, a = !1) {
                                const n = i.emailVerified;
                                if (!e && !n && "ACTIVE" === i.status) return Ei.showConfirmationEmailDialog(i.id);
                                if (!e || "REQUIRE_OWNER_APPROVAL" === o) return Ei.showAdminApprovalDialog(i.loginEmail);
                                (0, N.kS)(u, Ie, {
                                    sessionToken: e
                                });
                                const s = await Ei.applySessionToken(e, i, a && !t, !!t),
                                    r = null != t ? t : s;
                                return Object.assign({
                                    sessionToken: e,
                                    member: i
                                }, a ? {
                                    pages: r
                                } : {})
                            },
                            async promptLogin(e, i, t) {
                                var o, a, n, s;
                                void 0 === e && (e = {}), void 0 === i && (i = null === (a = null === (o = hi.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a), void 0 === t && (t = null !== (s = null === (n = hi.config) || void 0 === n ? void 0 : n.returnPages) && void 0 !== s && s);
                                const {
                                    mode: r,
                                    modal: l
                                } = e, c = "login" === (null != r ? r : Fe), u = l ? "popup" : "fullscreen";
                                return J ? (await Ei.showNotificationDialog(Ce.templateNotificationTitle, Ce.templateNotificationMessage, Ce.containerOk), Promise.reject(P.$9.CANCELED)) : (pi.loadScript(d.userLanguage, P.mz), c ? Ei.showLoginDialog({
                                    isCloseable: i,
                                    displayMode: u,
                                    returnPages: t
                                }) : Ei.showSignUpDialog({
                                    isCloseable: i,
                                    displayMode: u,
                                    returnPages: t
                                }))
                            },
                            promptForgotPassword(e = !0) {
                                return new Promise(((i, t) => {
                                    hi.assignRequestAuthenticationPromise(i, t);
                                    const o = {
                                            isCloseable: e,
                                            directionByLanguage: d.directionByLanguage,
                                            translations: Ce
                                        },
                                        a = {
                                            async onCloseDialogCallback() {
                                                (0, N.CY)(Ie, u), ai.closingDialog("RequestResetPassword"), di.hideDialog(), hi.rejectAuthenticationRequest()
                                            },
                                            onSubmitCallback(e) {
                                                return Ei.sendForgotPasswordMail(e).then((async () => {
                                                    const e = () => {
                                                        (0, N.CY)(Ie, u), hi.resolveAuthenticationRequest(), t(P.$9.CANCELED)
                                                    };
                                                    Ei.showNotificationDialog(Ce.resetPasswordCheckEmailTitle, Ce.resetPasswordCheckEmailText, Ce.resetPasswordOk, e, e)
                                                }))
                                            }
                                        },
                                        n = ei();
                                    di.displayDialog("RequestPasswordResetDialog", o, a, n)
                                }))
                            },
                            async requestAuthentication(e = {}) {
                                if (Je) return {
                                    success: !0,
                                    token: Je,
                                    reason: P.$9.ALREADY_LOGGED_IN
                                };
                                try {
                                    const i = !x,
                                        {
                                            sessionToken: t
                                        } = await Ei.promptLogin(e, i);
                                    return {
                                        success: !0,
                                        token: t,
                                        reason: P.$9.SUCCESS
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async requestAuthorizedPages(e = {}) {
                                if (Ye) {
                                    return {
                                        success: !0,
                                        pages: await Ei.authorizeMemberPagesBySignedInstance(Ye)
                                    }
                                }
                                try {
                                    const i = !x;
                                    hi.setConfig({
                                        isCloseable: i,
                                        returnPages: !0
                                    });
                                    const t = await Ei.promptLogin(e, i, !0);
                                    return hi.reset(), {
                                        success: !0,
                                        pages: t.pages
                                    }
                                } catch (e) {
                                    return {
                                        success: !1,
                                        reason: e
                                    }
                                }
                            },
                            async applySessionToken(e, i, t = !1, a = !1) {
                                n.interactionStarted(P.SE.VERIFY_TOKEN);
                                const s = await (a ? si(`/_api/iam/cookie/v1/createSessionCookie?sessionToken=${e}`, {
                                    method: "GET",
                                    headers: {
                                        authorization: he || ""
                                    }
                                }) : si(Le, {
                                    method: "POST",
                                    body: `token=${e}`
                                }));
                                var l;
                                if (n.interactionEnded(P.SE.VERIFY_TOKEN), await r.loadNewSession({
                                        reason: "memberLogin"
                                    }), he = r.getAppInstanceByAppDefId(me), Ye = r.getSmToken(), Je = e, ze = null != i ? i : await Ei.getMemberDetails(), await (l = ze, Promise.all(Object.entries(ti).map((async ([e, i]) => {
                                        try {
                                            if ("$$$timeout$$$" === await Promise.race([i(l), (0, N._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                        } catch (e) {
                                            n.captureError(e, {
                                                tags: {
                                                    feature: "site-members"
                                                }
                                            })
                                        }
                                    })))), o.export({
                                        memberDetails: ze
                                    }), t) return s.payload.pages
                            },
                            async authorizeMemberPagesByCookie() {
                                const e = (0, p.yF)(u) ? {
                                        headers: {
                                            cookie: `smSession=${G}`
                                        }
                                    } : void 0,
                                    {
                                        authorizedPages: i
                                    } = await si(ke, e);
                                return i
                            },
                            async authorizeMemberPagesByToken(e) {
                                if (e === G) return this.authorizeMemberPagesByCookie();
                                const {
                                    payload: i
                                } = await si(Le, {
                                    method: "POST",
                                    body: `token=${e}`
                                }), {
                                    pages: t
                                } = i;
                                return t
                            },
                            async authorizeMemberPagesBySignedInstance(e) {
                                const i = {
                                        headers: {
                                            authorization: e
                                        }
                                    },
                                    {
                                        authorizedPages: t
                                    } = await si(ke, i);
                                return t
                            },
                            async getMemberDetails(e = !1) {
                                return ze.id && !e ? ze : Ye ? (ze = await ii(), o.export({
                                    memberDetails: ze
                                }), e && await (i = ze, Promise.all(Object.values(ni).map((async e => {
                                    try {
                                        await e(i)
                                    } catch (e) {
                                        n.captureError(e, {
                                            tags: {
                                                feature: "site-members"
                                            }
                                        })
                                    }
                                })))), ze) : null;
                                var i
                            },
                            async register(e, i, t, o, a, s, r, l, c) {
                                var d, g, m, p, h, v, S, b, E, y;
                                s = null != s && s;
                                try {
                                    const c = await gi.getCaptchaSettings();
                                    if (c.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && !r && !(null == l ? void 0 : l.otp) && !(null == l ? void 0 : l.verificationId)) throw P.Xu;
                                    n.interactionStarted(P.SE.CODE_SIGNUP), w.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.SUBMIT));
                                    const g = null == C ? void 0 : C.getCurrentLightboxId(),
                                        m = null === (d = f.getCurrentRouteInfo()) || void 0 === d ? void 0 : d.pageId,
                                        p = a || Ge && g && Ge === g || Ge && m && Ge === m,
                                        h = c.invisible.signup && p ? await mi(P.Ly.SIGNUP) : void 0,
                                        {
                                            member: v,
                                            sessionToken: S,
                                            pages: b,
                                            status: E
                                        } = await Ei.performRegister(e, i, {
                                            contactInfo: t,
                                            profilePrivacyStatus: o,
                                            isDefaultFlow: a,
                                            recaptchaToken: r,
                                            invisibleRecaptchaToken: h,
                                            emailVerification: l
                                        }),
                                        y = v.emailVerified,
                                        D = "ACTIVE" === (null == v ? void 0 : v.status) ? "ACTIVE" : "PENDING";
                                    if (!S && !y && "ACTIVE" === v.status) return n.interactionEnded(P.SE.CODE_SIGNUP), Ei.showConfirmationEmailDialog(v.id);
                                    if (a && "APPLICANT" === (null == v ? void 0 : v.status) || !S || "REQUIRE_OWNER_APPROVAL" === E) return n.interactionEnded(P.SE.CODE_SIGNUP), Ei.showAdminApprovalDialog(e);
                                    (0, N.kS)(u, Ie, {
                                        sessionToken: S
                                    });
                                    const O = await Ei.applySessionToken(S, v, s && !b, !!b),
                                        A = null != b ? b : O;
                                    return n.interactionEnded(P.SE.CODE_SIGNUP), w.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.SUCCESS)), w.trackEvent({
                                        eventName: "CompleteRegistration",
                                        params: {
                                            origin: "Site members",
                                            method: "Wix"
                                        }
                                    }), Object.assign({
                                        member: v,
                                        status: D,
                                        sessionToken: S
                                    }, s && A ? {
                                        pages: A
                                    } : {})
                                } catch (l) {
                                    if ((0, N.yQ)(l)) {
                                        const n = await gi.getSiteMembersSettings(),
                                            d = null === (p = null === (m = null === (g = null == l ? void 0 : l.details) || void 0 === g ? void 0 : g.applicationError) || void 0 === m ? void 0 : m.data) || void 0 === p ? void 0 : p.verificationId,
                                            u = null !== (b = null === (S = null === (v = null === (h = null == l ? void 0 : l.details) || void 0 === h ? void 0 : h.applicationError) || void 0 === v ? void 0 : v.data) || void 0 === S ? void 0 : S.verificationFailureReason) && void 0 !== b ? b : null === (y = null === (E = null == l ? void 0 : l.details) || void 0 === E ? void 0 : E.applicationError) || void 0 === y ? void 0 : y.code,
                                            C = {
                                                email: e,
                                                verificationId: d,
                                                error: u
                                            };
                                        return Ei.showVerificationCodeDialog(C).then((l => {
                                            const d = {
                                                verificationId: null == C ? void 0 : C.verificationId,
                                                otp: l
                                            };
                                            return "DURING_SIGNUP" !== n.emailVerificationOption ? Ei.login(e, i, {
                                                recaptchaToken: r
                                            }, s, d, a).then((e => {
                                                var i;
                                                const t = "ACTIVE" === (null === (i = null == e ? void 0 : e.member) || void 0 === i ? void 0 : i.status) ? "ACTIVE" : "PENDING";
                                                return Object.assign(Object.assign({}, e), {
                                                    status: t
                                                })
                                            }), (e => {
                                                throw a && Ei.showLoginDialog(c, e), e
                                            })) : Ei.register(e, i, t, o, a, s, r, d, c).catch((e => {
                                                throw a && Ei.showSignUpDialog(c, e), e
                                            }))
                                        })).then((e => (di.hideDialog(), e)))
                                    }
                                    throw (0, N.fJ)(l) ? n.interactionEnded(P.SE.CODE_SIGNUP) : w.trackEvent((0, P.RN)(P.eE.ACTIONS.SIGNUP.FAIL)), l
                                }
                            },
                            async performRegister(e, i, {
                                contactInfo: t,
                                profilePrivacyStatus: o,
                                isDefaultFlow: a,
                                recaptchaToken: n,
                                invisibleRecaptchaToken: s,
                                emailVerification: r
                            } = {}) {
                                return (0, N.gb)(!!I["specs.thunderbolt.useIAMPlatform"], (async () => {
                                    var a, r;
                                    const l = {
                                            identity: {
                                                identifiers: [{
                                                    email: e
                                                }],
                                                identityProfile: Object.assign(Object.assign({}, (0, N.AO)(t || {})), {
                                                    privacyStatus: o
                                                })
                                            },
                                            inputs: {
                                                password: i
                                            },
                                            captcha_tokens: [...n ? [{
                                                Recaptcha: n
                                            }] : [], ...s ? [{
                                                InvisibleRecaptcha: s
                                            }] : []]
                                        },
                                        c = I["specs.thunderbolt.iamOverAmbassador"] ? await ri.request(function(e) {
                                            var i = (0, W.G)(re, {
                                                    _customField: Z,
                                                    _customValue: ee,
                                                    _identity: ie,
                                                    _identityProfile: te,
                                                    _listValue: oe,
                                                    _mapValue: se
                                                }),
                                                t = i.toJSON,
                                                o = i.fromJSON,
                                                a = (0, W.G)(ne, {
                                                    _customField: Z,
                                                    _customValue: ee,
                                                    _identity: ie,
                                                    _identityProfile: te,
                                                    _listValue: oe,
                                                    _mapValue: se
                                                }).fromJSON;

                                            function n(i) {
                                                var o = i.host,
                                                    n = t(e);
                                                return {
                                                    entityFqdn: "wix.iam.authentication.v1.authentication",
                                                    method: "POST",
                                                    methodFqn: "wix.iam.authentication.v1.AuthenticationService.Register",
                                                    url: le({
                                                        protoPath: "/v1/register",
                                                        data: n,
                                                        host: o
                                                    }),
                                                    data: n,
                                                    transformResponse: a
                                                }
                                            }
                                            return n.fromReq = o, n
                                        }(l), {
                                            signedInstance: he || ""
                                        }).then((e => e.data)) : await si("/_api/iam/authentication/v1/register", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: he || ""
                                            },
                                            body: JSON.stringify(l)
                                        });
                                    return {
                                        member: (0, N.T2)(c),
                                        sessionToken: c.sessionToken,
                                        pages: (0, N.AC)(null === (a = c.additionalData) || void 0 === a ? void 0 : a.protectedPages),
                                        status: null === (r = null == c ? void 0 : c.state) || void 0 === r ? void 0 : r.status
                                    }
                                }), (async () => {
                                    const l = {
                                            email: e,
                                            password: i,
                                            profilePrivacyStatus: o,
                                            contactInfo: (0, N.t1)(t || {}),
                                            defaultFlow: a,
                                            recaptchaToken: n,
                                            invisibleRecaptchaToken: s,
                                            emailVerification: r
                                        },
                                        {
                                            member: c,
                                            session: d
                                        } = await si("/_api/wix-sm-webapp/v1/auth/signup", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json",
                                                authorization: he || ""
                                            },
                                            body: JSON.stringify(l)
                                        });
                                    return {
                                        member: c,
                                        sessionToken: null == d ? void 0 : d.token
                                    }
                                }))
                            },
                            async sendForgotPasswordMail(e) {
                                n.interactionStarted(P.SE.RESET_PASSWORD);
                                const i = d.userLanguage,
                                    t = encodeURIComponent(Ie),
                                    o = encodeURIComponent(e),
                                    a = I["specs.thunderbolt.iamResetPasswordFlow"] ? "/_api/iam/recovery/v1/send-email" : "/_api/wix-sm-webapp/member/sendForgotPasswordMail",
                                    s = I["specs.thunderbolt.iamResetPasswordFlow"] ? JSON.stringify({
                                        language: i,
                                        email: e,
                                        redirect: {
                                            url: Ie
                                        }
                                    }) : `returnUrl=${t}&collectionId=${H}&metaSiteId=${Pe}&lang=${i}&email=${o}`,
                                    r = I["specs.thunderbolt.iamResetPasswordFlow"] ? {
                                        "Content-Type": "application/json",
                                        authorization: he || ""
                                    } : void 0;
                                await si(a, {
                                    headers: r,
                                    method: "POST",
                                    body: s
                                }), n.interactionEnded(P.SE.RESET_PASSWORD)
                            },
                            async sendSetPasswordEmail(e, i) {
                                const t = await si("/_api/wix-sm-webapp/members/v1/auth/members/send-set-password-email", {
                                    method: "POST",
                                    headers: {
                                        "Content-Type": "application/json",
                                        authorization: he || ""
                                    },
                                    body: JSON.stringify(Object.assign({
                                        email: e
                                    }, (null == i ? void 0 : i.hideIgnoreMessage) ? {
                                        hideIgnoreMessage: i.hideIgnoreMessage
                                    } : {}))
                                });
                                return !!(null == t ? void 0 : t.accepted)
                            },
                            async changePassword(e, i) {
                                const t = encodeURIComponent(e),
                                    o = i.startsWith(P.nc),
                                    a = o ? "/_api/iam/recovery/v1/recover" : Me,
                                    n = o ? JSON.stringify({
                                        password: e,
                                        recovery_token: i
                                    }) : `newPassword=${t}&forgotPasswordToken=${i}`,
                                    s = o ? {
                                        "Content-Type": "application/json",
                                        authorization: he || ""
                                    } : void 0;
                                await si(a, {
                                    method: "POST",
                                    headers: s,
                                    body: n
                                })
                            },
                            async resendEmailVerification(e) {
                                await si(`/_api/wix-sm-webapp/tokens/email/resend/${e}`)
                            },
                            async logout(e) {
                                if (Ye) {
                                    if (await si(Ue, {
                                            method: "POST"
                                        }).catch((() => {
                                            w.trackEvent((0, P.RN)(P.eE.ACTIONS.LOGOUT.FAIL))
                                        })), await Promise.all(Object.entries(oi).map((async ([e, i]) => {
                                            try {
                                                if ("$$$timeout$$$" === await Promise.race([i(), (0, N._v)(3e3).then((() => "$$$timeout$$$"))])) throw new Error(`callback ${e} timed out`)
                                            } catch (e) {
                                                n.captureError(e, {
                                                    tags: {
                                                        feature: "site-members"
                                                    }
                                                })
                                            }
                                        }))), e) {
                                        const i = `./${e.replace(/^\//,"")}`;
                                        await g.navigate(i)
                                    }(0, p.yF)(u) || u.document.location.reload()
                                }
                            },
                            registerToUserLogin(e, i = (0, y.uniqueId)("callback")) {
                                return ti[i] = e, i
                            },
                            unRegisterToUserLogin(e) {
                                delete ti[e]
                            },
                            registerToMemberLogout(e) {
                                const i = (0, y.uniqueId)("logout_callback");
                                return oi[i] = e, i
                            },
                            unRegisterToMemberLogout(e) {
                                delete oi[e]
                            },
                            registerToMemberDetailsRefresh(e) {
                                const i = (0, y.uniqueId)("mdrcb");
                                return ni[i] = e, i
                            },
                            unRegisterToMemberDetailsRefresh(e) {
                                delete ni[e]
                            },
                            async showWelcomeDialog(e = !0) {
                                const i = {
                                        isCloseable: e,
                                        translations: Ce
                                    },
                                    t = S.getParsedUrl(),
                                    o = {
                                        onCloseDialogCallback() {
                                            (0, N.CY)(Ie, u), ai.closingDialog("WelcomeDialog");
                                            const e = new URL(Ie).hostname,
                                                i = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            de("sm_ef", "/", i), ue = "", di.hideDialog(), g.navigate(t.href)
                                        },
                                        onSubmitCallback() {
                                            const e = new URL(Ie).hostname,
                                                i = 0 === e.indexOf("www") ? e.substr(3) : e;
                                            de("sm_ef", "/", i), ue = "", di.hideDialog(), ye && g.navigate("./account/my-account"), g.navigate(t.href)
                                        }
                                    };
                                n.interactionStarted(P.SE.WELCOME_DIALOG), n.interactionEnded(P.SE.WELCOME_DIALOG), di.displayDialog("WelcomeDialog", i, o)
                            },
                            async showNoPermissionsToPageDialog(e) {
                                const i = {
                                    onCloseDialogCallback() {
                                        (0, N.CY)(Ie, u), di.hideDialog(), e && e()
                                    },
                                    onSwitchAccountLinkClick() {
                                        Ei.logout()
                                    }
                                };
                                di.displayDialog("NoPermissionsToPageDialog", {
                                    translations: Ce
                                }, i)
                            },
                            async showResetPasswordDialog(e) {
                                const i = {
                                        isCloseable: !0,
                                        isTermsOfUseNeeded: !(!(null == $e ? void 0 : $e.enabled) || !Ee.termsOfUse),
                                        isPrivacyPolicyNeeded: !(!(null == We ? void 0 : We.enabled) || !Ee.privacyPolicy),
                                        termsOfUseLink: Ee.termsOfUse,
                                        privacyPolicyLink: Ee.privacyPolicy,
                                        directionByLanguage: d.directionByLanguage,
                                        translations: Ce
                                    },
                                    t = () => {
                                        const e = S.getParsedUrl();
                                        return e.searchParams.delete("forgotPasswordToken"), e.searchParams.delete("forgotPasswordLang"), S.pushUrlState(e), e
                                    },
                                    o = {
                                        onCloseDialogCallback() {
                                            (0, N.CY)(Ie, u), ai.closingDialog("ResetPasswordDialog");
                                            const e = t();
                                            di.hideDialog(), g.navigate(e.href)
                                        },
                                        async onSubmitCallback(o) {
                                            try {
                                                await Ei.changePassword(o, e), Ei.showNotificationDialog(Ce.resetPasswordSuccessTitle, "", Ce.containerOk, (async () => {
                                                    if (e.startsWith(P.nc)) {
                                                        const e = new URL(Ie).searchParams.get("redirectUrl");
                                                        if (e) return null == u ? void 0 : u.location.replace(e)
                                                    }
                                                    const i = t();
                                                    await Ei.showLoginDialog(), g.navigate(i.href)
                                                }))
                                            } catch (e) {
                                                const t = (0, N.zg)(e).toString();
                                                if (t !== P.O1.RESET_PASSWORD_TOKEN_EXPIRED && t !== P.O1.NEW_RESET_PASSWORD_TOKEN_EXPIRED) throw e;
                                                Ei.showNotificationDialog(Ce.passwordHasExpiredTitle, Ce.passwordHasExpiredText, Ce.passwordHasExpiredOk, (() => Ei.promptForgotPassword(i.isCloseable).then((() => {
                                                    const e = S.getParsedUrl();
                                                    g.navigate(e.href)
                                                }))))
                                            }
                                        }
                                    };
                                di.displayDialog("ResetPasswordDialog", i, o, ei())
                            },
                            async showLoginDialog(e = {}, i) {
                                const {
                                    returnPages: t,
                                    isCloseable: o,
                                    displayMode: a
                                } = Object.assign({
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1
                                }, e), s = await gi.getCaptchaSettings();
                                return pi.setCaptchaBadgeVisibility(s.invisible.login), qe && (null == C ? void 0 : C.isLightbox(qe)) ? Ei.showCustomAuthenticationDialog(qe, t) : new Promise((async (r, l) => {
                                    hi.assignRequestAuthenticationPromise(r, l);
                                    const c = "Enabled" === I["specs.ShouldForceCaptchaVerificationOnLoginSpec"] || s.visible.login,
                                        [g, m] = (0, y.partition)(await Ei.getConnections(), {
                                            appDefId: P.Ld.PASSWORD
                                        }),
                                        p = await Ei.getLoginUrl(),
                                        v = {
                                            bsi: Si,
                                            displayMode: a,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: o,
                                            smCollectionId: H,
                                            svSession: pe,
                                            biVisitorId: ve(),
                                            metaSiteId: Pe,
                                            isEmailLoginEnabled: g.length > 0,
                                            idps: m,
                                            shouldForceCaptchaVerification: !s.invisible.login && c,
                                            isSocialAuthSupported: _e,
                                            serverError: i,
                                            reportBi: b.reportBi,
                                            translations: Ce,
                                            externalBaseUrl: Ei.getExternalBaseUrl(),
                                            loginUrl: p
                                        },
                                        S = {
                                            onCloseDialogCallback() {
                                                (0, N.CY)(Ie, u), di.hideDialog(), ai.closingDialog("MemberLoginDialog", a), hi.rejectAuthenticationRequest()
                                            },
                                            submit(i, o, s) {
                                                return n.interactionStarted(P.SE.DEFAULT_LOGIN), ai.emailAuthSubmitClicked("MemberLoginDialog", a), Ei.login(i, o, s, t, void 0, !0, e).then((e => {
                                                    n.interactionEnded(P.SE.DEFAULT_LOGIN), di.hideDialog(), r(e)
                                                })).catch((e => {
                                                    throw (0, N.Y2)(e) && n.interactionEnded(P.SE.DEFAULT_LOGIN), e
                                                }))
                                            },
                                            onForgetYourPasswordClick() {
                                                Ei.promptForgotPassword(o)
                                            },
                                            onSwitchDialogLinkClick() {
                                                Ei.showSignUpDialog({
                                                    isCloseable: o,
                                                    displayMode: a,
                                                    returnPages: t
                                                }).then(r, (() => {
                                                    hi.rejectAuthenticationRequest()
                                                }))
                                            },
                                            async onTokenMessage(e, i, o = !1) {
                                                let a;
                                                return await ci.canHavePublicCommunity() && (a = o ? "PUBLIC" : "PRIVATE"), Ei.handleOauthToken(e, i, "memberLoginDialog", a, t).then((e => {
                                                    di.hideDialog(), r(e)
                                                }))
                                            },
                                            onBackendSocialLogin(e, i) {
                                                return Ei.handleSocialLoginResponse(e, i, t).then((e => {
                                                    di.hideDialog(), r(e)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: ve(),
                                                svSession: pe
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: A,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: bi
                                        };
                                    ai.loginOrSignUpDialogLoaded("MemberLoginDialog", a), await di.displayDialog("MemberLoginDialog", v, S, ei()), Ei.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async showSignUpDialog(e = {}, i) {
                                const {
                                    returnPages: t,
                                    isCloseable: o,
                                    displayMode: a
                                } = Object.assign({
                                    isCloseable: !0,
                                    displayMode: "fullscreen",
                                    returnPages: !1
                                }, e), s = await gi.getCaptchaSettings();
                                if (pi.setCaptchaBadgeVisibility(s.invisible.signup), Ge && (null == C ? void 0 : C.isLightbox(Ge))) return Ei.showCustomAuthenticationDialog(Ge, t);
                                const r = "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"] && "Enabled" === I["specs.ShouldForceCaptchaVerificationOnSignupSpec"];
                                return new Promise((async (l, c) => {
                                    const g = r || s.visible.signup && "Enabled" !== I["specs.ShouldPassCaptchaVerificationOnSignupSpec"],
                                        [m, p] = (0, y.partition)(await Ei.getConnections(), {
                                            appDefId: P.Ld.PASSWORD
                                        }),
                                        v = await Ei.getLoginUrl();
                                    hi.assignRequestAuthenticationPromise(l, c);
                                    const S = {
                                            bsi: Si,
                                            displayMode: a,
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: o,
                                            smCollectionId: H,
                                            biVisitorId: ve(),
                                            svSession: pe,
                                            metaSiteId: Pe,
                                            isSocialAuthSupported: _e,
                                            isEmailLoginEnabled: m.length > 0,
                                            idps: p,
                                            isCommunityInstalled: await ci.canHavePublicCommunity(),
                                            privacyNoteType: He,
                                            joinCommunityCheckedByDefault: Ke,
                                            isTermsOfUseNeeded: !(!(null == $e ? void 0 : $e.enabled) || !Ee.termsOfUse),
                                            isPrivacyPolicyNeeded: !(!(null == We ? void 0 : We.enabled) || !Ee.privacyPolicy),
                                            isCodeOfConductNeeded: !(!(null == xe ? void 0 : xe.enabled) || !Ee.codeOfConduct),
                                            shouldForceCaptchaVerification: !s.invisible.signup && g,
                                            termsOfUseLink: Ee.termsOfUse,
                                            privacyPolicyLink: Ee.privacyPolicy,
                                            codeOfConductLink: Ee.codeOfConduct,
                                            serverError: i,
                                            reportBi: b.reportBi,
                                            translations: Ce,
                                            externalBaseUrl: Ei.getExternalBaseUrl(),
                                            loginUrl: v
                                        },
                                        E = {
                                            onCloseDialogCallback() {
                                                (0, N.CY)(Ie, u), di.hideDialog(), ai.closingDialog("SignUpDialog", a), hi.rejectAuthenticationRequest()
                                            },
                                            async submit(i, o, s) {
                                                let r;
                                                if (await ci.canHavePublicCommunity()) {
                                                    r = ("boolean" == typeof s ? s : s.isCommunityChecked) ? ce.iY.PUBLIC : ce.iY.PRIVATE
                                                }
                                                const c = "boolean" == typeof s || null == s ? void 0 : s.recaptchaToken;
                                                return n.interactionStarted(P.SE.DEFAULT_SIGNUP), ai.emailAuthSubmitClicked("SignUpDialog", a), Ei.register(i, o, void 0, r, !0, t, c, void 0, e).then((e => {
                                                    n.interactionEnded(P.SE.DEFAULT_SIGNUP);
                                                    const {
                                                        member: i,
                                                        sessionToken: o,
                                                        pages: a
                                                    } = e;
                                                    o && (di.hideDialog(), l(Object.assign({
                                                        member: i,
                                                        sessionToken: o
                                                    }, t ? {
                                                        pages: a
                                                    } : {})))
                                                })).catch((e => {
                                                    throw (0, N.fJ)(e) && n.interactionEnded(P.SE.DEFAULT_SIGNUP), e
                                                }))
                                            },
                                            onSwitchDialogLinkClick() {
                                                Ei.showLoginDialog({
                                                    isCloseable: o,
                                                    displayMode: a,
                                                    returnPages: t
                                                }).then(l, (() => {
                                                    hi.rejectAuthenticationRequest()
                                                }))
                                            },
                                            async onTokenMessage(e, i, o = !1) {
                                                let a;
                                                return await ci.canHavePublicCommunity() && (a = o ? "PUBLIC" : "PRIVATE"), Ei.handleOauthToken(e, i, "memberLoginDialog", a, t).then((e => {
                                                    di.hideDialog(), l(e)
                                                }))
                                            },
                                            onBackendSocialLogin(e, i) {
                                                return Ei.handleSocialLoginResponse(e, i, t).then((e => {
                                                    di.hideDialog(), l(e)
                                                }))
                                            },
                                            getHostReadyPayload: () => ({
                                                visitorId: ve(),
                                                svSession: pe
                                            }),
                                            openCaptcha: (0, h.yT)({
                                                captcha: A,
                                                userLanguage: d.userLanguage
                                            }),
                                            reportSocialAuthStarted: bi
                                        };
                                    ai.loginOrSignUpDialogLoaded("SignUpDialog", a), await di.displayDialog("SignUpDialog", S, E, ei()), Ei.closeCustomAuthenticationDialogs(!0)
                                }))
                            },
                            async hideAuthDialog() {
                                console.warn("hideAuthDialog is not supported")
                            },
                            async showNotificationDialog(e, i, t, o = (() => 0), a = (() => 0)) {
                                const n = {
                                        isCloseable: !0,
                                        title: e,
                                        description: i,
                                        okButtonText: t,
                                        translations: Ce
                                    },
                                    s = {
                                        onCloseDialogCallback() {
                                            (0, N.CY)(Ie, u), ai.closingDialog("NotificationDialog"), di.hideDialog(), a()
                                        },
                                        onOkButtonClick() {
                                            di.hideDialog(), o()
                                        }
                                    };
                                await di.displayDialog("NotificationDialog", n, s)
                            },
                            async showConfirmationEmailDialog(e, i = !0) {
                                return new Promise(((t, o) => {
                                    const a = {
                                            isCloseable: !0,
                                            isSignUp: i,
                                            translations: Ce
                                        },
                                        n = {
                                            onCloseDialogCallback() {
                                                (0, N.CY)(Ie, u), ai.closingDialog("ConfirmationEmailDialog"), di.hideDialog(), hi.rejectAuthenticationRequest(), o(P.$9.CANCELED)
                                            },
                                            async onResendConfirmationEmail() {
                                                await Ei.resendEmailVerification(e), await Ei.showConfirmationEmailDialog(e, !1).catch(o)
                                            }
                                        };
                                    di.displayDialog("ConfirmationEmailDialog", a, n)
                                }))
                            },
                            async showAdminApprovalDialog(e) {
                                return new Promise(((i, t) => {
                                    const o = () => {
                                        (0, N.kS)(u, Ie, {
                                            error: N.nA.ACCESS_DENIED
                                        }), hi.rejectAuthenticationRequest(), t(P.$9.CANCELED)
                                    };
                                    Ei.showNotificationDialog("", `${Ce.applySuccess1} ${Ce.applySuccess2}`.replace("{0}", e), Ce.containerOk, o, o)
                                }))
                            },
                            async showCustomAuthenticationDialog(e, i = !1) {
                                if (!C) throw new Error("popup unavailable");
                                return new Promise((async (t, o) => {
                                    hi.assignRequestAuthenticationPromise(t, o);
                                    const a = Ei.registerToUserLogin((async () => {
                                        hi.resolveAuthenticationRequest(Object.assign({
                                            member: ze,
                                            sessionToken: Je
                                        }, i ? {
                                            pages: await Ei.authorizeMemberPagesBySignedInstance(Ye)
                                        } : {})), Ei.unRegisterToUserLogin(a), C.getCurrentLightboxId() === e && C.close()
                                    }), "customAuthCbId");
                                    await hi.openPopupPage(e, (() => {
                                        Ei.unRegisterToUserLogin(a)
                                    })), di.hideDialog()
                                }))
                            },
                            async closeCustomAuthenticationDialogs(e = !1) {
                                const i = null == C ? void 0 : C.getCurrentLightboxId();
                                i && [Ge, qe].includes(i) && (e && hi.preventCustomPopupCloseCallback(), await C.close(), hi.allowCustomPopupCloseCallback())
                            },
                            getForgotPasswordToken() {
                                return new URL((0, p.yF)(u) ? Ie : u.location.href).searchParams.get("forgotPasswordToken")
                            },
                            shouldDisplayWelcomeDialog() {
                                return ue && ye
                            },
                            async showVerificationCodeDialog(e) {
                                return new Promise((async (i, t) => {
                                    var o, a;
                                    n.interactionStarted(P.SE.VERIFICATION_CODE), ai.siteMembersEmailConfirmationNewMembersModalLoad(), hi.assignRequestAuthenticationPromise(i, t);
                                    const s = {
                                            language: d.userLanguage,
                                            directionByLanguage: d.directionByLanguage,
                                            isCloseable: null === (a = null === (o = hi.config) || void 0 === o ? void 0 : o.isCloseable) || void 0 === a || a,
                                            displayMode: "customPopup",
                                            email: null == e ? void 0 : e.email,
                                            error: null == e ? void 0 : e.error,
                                            translations: Ce
                                        },
                                        r = {
                                            onResendVerificationCodeEmail() {
                                                ai.siteMembersEmailConfirmationOnResendCodeClick(), i(null)
                                            },
                                            onCloseDialogCallback() {
                                                ai.closingDialog("VerificationCode"), (0, N.CY)(Ie, u), di.hideDialog(), hi.rejectAuthenticationRequest(), t(P.$9.CANCELED)
                                            },
                                            onSubmitCallback(e) {
                                                ai.siteMembersEmailConfirmationSendCodeClick(), i(e)
                                            }
                                        };
                                    n.interactionEnded(P.SE.VERIFICATION_CODE), di.displayDialog("VerificationCodeDialog", s, r)
                                }))
                            },
                            async appWillMount() {
                                j && await Ei.getMemberDetails();
                                switch (new URL(s.requestUrl).searchParams.get("showDialog")) {
                                    case "MemberLoginDialog":
                                        Ei.showLoginDialog();
                                        break;
                                    case "SignUpDialog":
                                        Ei.showSignUpDialog();
                                        break;
                                    case "RequestPasswordResetDialog":
                                        Ei.promptForgotPassword();
                                        break;
                                    case "ResetPasswordDialog":
                                        Ei.showResetPasswordDialog("faketoken");
                                        break;
                                    case "WelcomeDialog":
                                        Ei.showWelcomeDialog();
                                        break;
                                    case "NoPermissionsToPageDialog":
                                        Ei.showNoPermissionsToPageDialog();
                                        break;
                                    case "NotificationDialog":
                                        Ei.showNotificationDialog("title", "description", "ok");
                                        break;
                                    case "ConfirmationEmailDialog":
                                        Ei.showConfirmationEmailDialog("fakemember");
                                        break;
                                    case "VerificationCodeDialog":
                                        Ei.showVerificationCodeDialog({
                                            email: "testEmail@test.com"
                                        })
                                }
                            },
                            pageWillUnmount({
                                pageId: e
                            }) {
                                [Ge, qe].includes(e) || di.hideDialog()
                            },
                            getSocialAuthComponentProps() {
                                return (0, N.IO)({
                                    config: e,
                                    viewerModel: s,
                                    sessionManager: r,
                                    bsiManager: R,
                                    handleOauthToken: Ei.handleOauthToken,
                                    handleSocialLoginResponse: Ei.handleSocialLoginResponse,
                                    isSocialAuthSupported: Re,
                                    captcha: A,
                                    userLanguage: d.userLanguage,
                                    reportBi: b.reportBi,
                                    reportSocialAuthStarted: bi,
                                    useNewSocialFlow: !!I["specs.thunderbolt.ShouldUseNewIAMSocialFlow"],
                                    translations: Ce
                                })
                            },
                            async getConnections() {
                                if (I["specs.thunderbolt.useIAMEnabledConnections"]) return gi.getEnabledConnections().then((e => e.map((({
                                    id: e,
                                    appDefId: i,
                                    displayName: t
                                }) => ({
                                    id: e,
                                    appDefId: i,
                                    name: t
                                })))));
                                const e = new URL(Ie).searchParams.get("idpConnectionId");
                                return [...ge ? [] : [{
                                    id: P.Ld.PASSWORD,
                                    appDefId: P.Ld.PASSWORD,
                                    name: "Password"
                                }], ...je ? [{
                                    id: P.Ld.GOOGLE,
                                    appDefId: P.Ld.GOOGLE,
                                    name: "Google"
                                }] : [], ...Ve && !ge ? [{
                                    id: P.Ld.FACEBOOK,
                                    appDefId: P.Ld.FACEBOOK,
                                    name: "Facebook"
                                }] : [], ...e ? [{
                                    id: e,
                                    appDefId: e,
                                    name: "SSO"
                                }] : []]
                            },
                            getLoginUrl() {
                                if (ui && I["specs.thunderbolt.shouldFetchLoginUrlByClientId"]) return gi.getLoginRedirectUrl()
                            },
                            getExternalBaseUrl() {
                                return I["specs.thunderbolt.shouldUseExternalBaseUrl"] ? we : void 0
                            }
                        };
                    return o.export({
                        promptLogin: Ei.promptLogin,
                        logout: Ei.logout,
                        memberDetails: ze
                    }), t.update((() => ({
                        shouldShowRenderingBlockingDialogs: () => !(!Ei.getForgotPasswordToken() && !Ei.shouldDisplayWelcomeDialog()),
                        showRenderingBlockingDialogs: () => {
                            const e = Ei.getForgotPasswordToken();
                            return e ? Ei.showResetPasswordDialog(e) : Ei.shouldDisplayWelcomeDialog() ? Ei.showWelcomeDialog() : void 0
                        }
                    }))), Ei
                }));
            var ge = t(59032),
                me = t(95793),
                pe = t(81600);
            const he = (0, o.ff)([w.n9], (e => ({
                    getTpaHandlers() {
                        const i = async (i, t, o) => {
                                var a, n, s;
                                const r = await e.getMemberDetails(!0);
                                return r ? (null === (a = o.appClientSpecMapData) || void 0 === a ? void 0 : a.isWixTPA) ? {
                                    attributes: {
                                        firstName: null !== (n = r.firstName) && void 0 !== n ? n : "",
                                        lastName: null !== (s = r.lastName) && void 0 !== s ? s : "",
                                        privacyStatus: r.profilePrivacyStatus
                                    },
                                    name: r.memberName,
                                    email: r.loginEmail,
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : {
                                    id: r.id,
                                    owner: r.owner,
                                    status: r.status
                                } : null
                            },
                            t = async (i, t = {}) => {
                                var o, a;
                                const {
                                    member: n
                                } = await e.promptLogin({
                                    mode: t.mode,
                                    modal: t.modal
                                });
                                return {
                                    attributes: {
                                        firstName: null !== (o = n.firstName) && void 0 !== o ? o : "",
                                        lastName: null !== (a = n.lastName) && void 0 !== a ? a : "",
                                        privacyStatus: n.profilePrivacyStatus
                                    },
                                    name: n.memberName,
                                    email: n.loginEmail,
                                    id: n.id,
                                    owner: n.owner,
                                    status: n.status
                                }
                            };
                        return {
                            currentMember: i,
                            smCurrentMember: i,
                            logOutCurrentMember: (0, pe.u)(["site"], ((i, t) => {
                                e.logout(null == t ? void 0 : t.url)
                            })),
                            requestLogin: (0, pe.u)(["site"], t),
                            smRequestLogin: (0, pe.u)(["site"], t)
                        }
                    }
                }))),
                ve = (0, o.ff)([w.n9, (0, o.t6)(a.$e, w.u2), r.xP], ((e, {
                    componentIds: i
                }, t) => ({
                    name: "site-members-components",
                    pageWillMount() {
                        const o = i.reduce(((i, t) => {
                            const o = e.getSocialAuthComponentProps();
                            return Object.assign(Object.assign({}, i), {
                                [t]: o
                            })
                        }), {});
                        t.update(o)
                    }
                }))),
                Se = (0, o.ff)([(0, o.t6)(a.Wf, w.u2)], (e => ({
                    handle: async i => {
                        const {
                            shouldShowRenderingBlockingDialogs: t,
                            showRenderingBlockingDialogs: o
                        } = e.get();
                        return t() ? (o(), null) : i
                    }
                }))),
                be = e => {
                    e(w.n9, ge.j.AppWillMountHandler, ge.j.AppDidMountHandler).to(ue), e(S.BD.BlockingDialogs).to(Se)
                },
                Ee = e => {
                    e(me.go).to(he), e(ge.j.PageWillMountHandler).to(ve), e(ge.j.PageWillUnmountHandler).to((0, o.ff)([w.n9], (e => ({
                        pageWillUnmount(i) {
                            return e.pageWillUnmount(i)
                        }
                    }))))
                }
        }
    }
]);
//# sourceMappingURL=https://static.parastorage.com/services/wix-thunderbolt/dist/group_8.b720eae3.chunk.min.js.map